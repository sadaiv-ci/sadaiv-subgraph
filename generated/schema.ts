// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class NewBuildCreated extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NewBuildCreated entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type NewBuildCreated must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("NewBuildCreated", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): NewBuildCreated | null {
    return changetype<NewBuildCreated | null>(
      store.get("NewBuildCreated", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get repository_owner(): string {
    let value = this.get("repository_owner");
    return value!.toString();
  }

  set repository_owner(value: string) {
    this.set("repository_owner", Value.fromString(value));
  }

  get repository_name(): string {
    let value = this.get("repository_name");
    return value!.toString();
  }

  set repository_name(value: string) {
    this.set("repository_name", Value.fromString(value));
  }

  get build_developer(): string {
    let value = this.get("build_developer");
    return value!.toString();
  }

  set build_developer(value: string) {
    this.set("build_developer", Value.fromString(value));
  }

  get build_cid(): string {
    let value = this.get("build_cid");
    return value!.toString();
  }

  set build_cid(value: string) {
    this.set("build_cid", Value.fromString(value));
  }

  get build_branch(): string {
    let value = this.get("build_branch");
    return value!.toString();
  }

  set build_branch(value: string) {
    this.set("build_branch", Value.fromString(value));
  }

  get build_commitMessage(): string {
    let value = this.get("build_commitMessage");
    return value!.toString();
  }

  set build_commitMessage(value: string) {
    this.set("build_commitMessage", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class VerifiedBuilder extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save VerifiedBuilder entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type VerifiedBuilder must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("VerifiedBuilder", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): VerifiedBuilder | null {
    return changetype<VerifiedBuilder | null>(
      store.get("VerifiedBuilder", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get email(): string {
    let value = this.get("email");
    return value!.toString();
  }

  set email(value: string) {
    this.set("email", Value.fromString(value));
  }

  get walletAddress(): Bytes {
    let value = this.get("walletAddress");
    return value!.toBytes();
  }

  set walletAddress(value: Bytes) {
    this.set("walletAddress", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}
